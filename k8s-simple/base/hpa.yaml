# =============================================================================
# HORIZONTAL POD AUTOSCALER (HPA) - Tự động scale pods
# =============================================================================
# HPA tự động tăng/giảm số lượng pods dựa trên metrics (CPU, Memory)
# Giúp app tự động scale theo load, tiết kiệm tài nguyên khi idle

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  # Tên của HPA
  name: lbs-hpa
  namespace: lbs-dev
  labels:
    app: location-based-service
spec:
  # scaleTargetRef: Deployment nào sẽ được scale
  scaleTargetRef:
    # apiVersion: API version của target
    apiVersion: apps/v1
    # kind: Loại resource (Deployment, StatefulSet, etc.)
    kind: Deployment
    # name: Tên của deployment (phải match với deployment.yaml)
    name: lbs-app
  
  # minReplicas: Số lượng pods tối thiểu
  # Dev environment: 1 pod là đủ khi idle
  minReplicas: 1
  
  # maxReplicas: Số lượng pods tối đa
  # Dev environment: 3 pods là đủ cho testing
  maxReplicas: 3
  
  # metrics: Danh sách metrics để quyết định khi nào scale
  metrics:
  # Metric 1: CPU utilization
  - type: Resource
    resource:
      # name: Tên metric (cpu hoặc memory)
      name: cpu
      target:
        # type: Loại target
        # Utilization: Phần trăm sử dụng so với requests
        # AverageValue: Giá trị trung bình
        type: Utilization
        # averageUtilization: Scale khi CPU usage vượt quá 70%
        # Ví dụ: Nếu requests là 100m, thì 70% = 70m
        # Khi pods dùng trung bình > 70m CPU, HPA sẽ tạo thêm pods
        averageUtilization: 70
  
  # Metric 2: Memory utilization
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        # averageUtilization: Scale khi Memory usage vượt quá 80%
        # Ví dụ: Nếu requests là 256Mi, thì 80% = 204Mi
        # Khi pods dùng trung bình > 204Mi RAM, HPA sẽ tạo thêm pods
        averageUtilization: 80
  
  # behavior: Tùy chỉnh hành vi scale (optional nhưng recommended)
  behavior:
    # scaleDown: Hành vi khi scale down (giảm pods)
    scaleDown:
      # stabilizationWindowSeconds: Chờ bao lâu trước khi scale down
      # 300 seconds = 5 phút
      # Tránh scale down quá nhanh khi load giảm tạm thời
      stabilizationWindowSeconds: 300
      
      # policies: Danh sách policies cho scale down
      policies:
      # Policy 1: Scale down tối đa 10% số pods trong 60 giây
      - type: Percent
        value: 10
        periodSeconds: 60
      
      # Policy 2: Scale down tối đa 1 pod trong 60 giây
      - type: Pods
        value: 1
        periodSeconds: 60
      
      # selectPolicy: Chọn policy nào để apply
      # Min: Chọn policy scale down ít nhất (conservative)
      # Max: Chọn policy scale down nhiều nhất (aggressive)
      selectPolicy: Min
    
    # scaleUp: Hành vi khi scale up (tăng pods)
    scaleUp:
      # stabilizationWindowSeconds: Chờ bao lâu trước khi scale up
      # 0 = scale up ngay lập tức khi cần
      stabilizationWindowSeconds: 0
      
      # policies: Danh sách policies cho scale up
      policies:
      # Policy 1: Scale up tối đa 50% số pods trong 60 giây
      - type: Percent
        value: 50
        periodSeconds: 60
      
      # Policy 2: Scale up tối đa 2 pods trong 60 giây
      - type: Pods
        value: 2
        periodSeconds: 60
      
      # selectPolicy: Max = scale up nhanh nhất có thể
      selectPolicy: Max

# =============================================================================
# CÁCH HPA HOẠT ĐỘNG
# =============================================================================
# 
# 1. Mỗi 15 giây (default), HPA check metrics của pods
# 2. Tính average CPU/Memory utilization của tất cả pods
# 3. So sánh với target utilization (70% CPU, 80% Memory)
# 4. Nếu > target: Scale up (tăng pods)
#    Nếu < target: Scale down (giảm pods)
# 
# Ví dụ Scale Up:
# - Hiện tại: 1 pod, CPU usage = 85% (> 70% target)
# - HPA decision: Cần thêm pods
# - Tính toán: desiredReplicas = ceil(currentReplicas * (currentMetric / targetMetric))
#              desiredReplicas = ceil(1 * (85 / 70)) = ceil(1.21) = 2 pods
# - Kết quả: Scale từ 1 lên 2 pods
# 
# Ví dụ Scale Down:
# - Hiện tại: 3 pods, CPU usage = 30% (< 70% target)
# - HPA decision: Có thể giảm pods
# - Chờ 5 phút (stabilizationWindowSeconds: 300)
# - Nếu vẫn low usage: Scale down theo policy (tối đa 1 pod/60s)
# - Kết quả: Scale từ 3 xuống 2 pods (sau 5 phút + 1 phút)
# 
# =============================================================================
# LƯU Ý
# =============================================================================
# 
# 1. Metrics Server: Cần cài đặt metrics-server trong cluster
#    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
# 
# 2. Resource Requests: Deployment PHẢI có resource requests
#    HPA tính toán dựa trên requests, không phải limits
# 
# 3. Health Checks: Pods cần có readiness probe
#    HPA chỉ tính metrics từ ready pods
# 
# 4. Min/Max Replicas: Chọn phù hợp với workload
#    Dev: 1-3, Staging: 2-5, Production: 3-20
# 
# 5. Target Utilization: Không nên set quá cao (>90%)
#    Để dư buffer cho traffic spikes
# =============================================================================
